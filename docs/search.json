[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "“Remember, if you’re traveling to Bactria, Hump Day is Tuesday and Thursday” ~ M. Edward (Ed) Borasky\n\nYou can find out more than you ever wanted to know about me on Bandcamp, LinkedIn and Mastodon. But briefly, I’m a retired scientific applications programmer with a near-life-long obsession with computer music - algorithmic composition and digital signal processing - and older forms of electronic music - musique concrète, East and West Coast analog synthesizers, and historic instruments like the Telharmonium, Trautonium, Theremin, and the Ondes Martenot.\nMy other obsession, a bit more recent, is microtonal music, especially music based on the theories of Erv Wilson. That’s a large enough obsession that it deserves its own project: Eikosany. But don’t worry - CLAMS will also be able to create microtonal music."
  },
  {
    "objectID": "about-CLAMS.html",
    "href": "about-CLAMS.html",
    "title": "About CLAMS",
    "section": "",
    "text": "“I’ve never seen a happy clam. In fact, most of them were really steamed.” ~ M. Edward (Ed) Borasky"
  },
  {
    "objectID": "about-CLAMS.html#overview",
    "href": "about-CLAMS.html#overview",
    "title": "About CLAMS",
    "section": "Overview",
    "text": "Overview\nCLAMS is a text-based interactive environment for composing and performing music on a Raspberry Pi Pico H microcontroller board. This board costs about $5US and includes soldered male headers and a debug connector. The initial release of CLAMS uses a Pimoroni Pico Audio Pack for audio output. The audio pack provides stereo headphone and line outputs, and costs about $18US as of 2023-02-11.\nCLAMS is a domain-specific language built on a Forth real-time operating system / interpreter. The user connects to the board from a command line on a host computer and enters CLAMS code interactively.\nThe CLAMS language is designed to facilitate live coding. Using a mixture of pre-compiled code and real-time directives, the user creates a performance in real time. The philosophy of CLAMS is similar to that of ChucK (Salazar et al. 2014) - a single text-based language to implement both the definitions of synthesized instruments and the sequences of sounds they make, intended for live coding / algorave performances.\nCLAMS is based on Travis Bemann’s zeptoforth. If you’re new to Forth and want to get started, Brodie (2022) is the place to start. There are a few PDF versions of Starting Forth on the web, but many are older versions. The one you want is the Forth, Inc. web version at https://www.forth.com/starting-forth/0-starting-forth/\nIf you’re already a Forth programmer, the zeptoforth words are documented at https://github.com/tabemann/zeptoforth/tree/master/html (HTML) and https://github.com/tabemann/zeptoforth/tree/master/epub (EPUB). For more details, see the zeptoforth wiki."
  },
  {
    "objectID": "about-CLAMS.html#goal",
    "href": "about-CLAMS.html#goal",
    "title": "About CLAMS",
    "section": "Goal",
    "text": "Goal\n\nalgorithmic music composition and performance …\nlive …\nin real time …\non a Raspberry Pi Pico!"
  },
  {
    "objectID": "about-CLAMS.html#architecture",
    "href": "about-CLAMS.html#architecture",
    "title": "About CLAMS",
    "section": "Architecture",
    "text": "Architecture\nCLAMS is a domain-specific language implemented in Forth. Conceptually, you can think of CLAMS as ChucK (Salazar et al. 2014) semantics with Forth syntax. CLAMS will have a single syntax and semantics to describe every part of the music creation process:\n\nthe unit generators that make and process digital audio,\nthe signal flow graphs that connect the unit generators, and\nthe score a composer writes and the gestures a performer makes.\n\nThus, CLAMS consists of three sets of Forth words:\n\nlow-level words: real time digital synthesis and microcontroller audio,\nmid-level words: signal flow graph construction\nhigh-level words: human interface for composition and live performance"
  },
  {
    "objectID": "about-CLAMS.html#inspirations-from-previous-forth-musical-systems",
    "href": "about-CLAMS.html#inspirations-from-previous-forth-musical-systems",
    "title": "About CLAMS",
    "section": "Inspirations from previous Forth musical systems",
    "text": "Inspirations from previous Forth musical systems\nAlthough ChucK is the primary inspiration for CLAMS, two early musical systems that used Forth are also inspirations:\n\nHierarchical Music Specification Language (HMSL). HMSL has a long history and experience with experimental composers, and is currently being actively enhanced! HMSL is on GitHub at https://github.com/philburk/hmsl.git.\nFORMULA - FORth MUsic LAnguage. Formula (David P. Anderson and Kuivila 1989), (D. P. Anderson and Kiuvila 1991) was a system designed for improvisation in real time. FORMULA has a successor written in Python called NUMULA, which is documented at https://github.com/davidpanderson/Numula/wiki."
  },
  {
    "objectID": "about-CLAMS.html#more-about-live-coding",
    "href": "about-CLAMS.html#more-about-live-coding",
    "title": "About CLAMS",
    "section": "More about live coding",
    "text": "More about live coding\nYou can find more about live coding from\n\nLive Coding: A User’s Manual (Blackwell et al. 2022),\nThe Temporal Organisation for the Proliferation of Live AudioVisual Programming (TOPLAP) home page,\nThe TOPLAP Wiki,\nThe TOPLAP Manifesto: “Obscurantism is dangerous. Show us your screens.” and\nAll things live coding (Awesome Live Coding).\n\nSee, for example TOPLAP Historical Performances, 80s FORTH era for some references to HMSL and to Ron Kuivila."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To the CLAMS Blog",
    "section": "",
    "text": "Welcome to the CLAMS blog! This is where I’ll be thinking out loud about the project and sharing progress. There will be formal documentation as well, but I haven’t gotten far enough into the project to lay that out in any great detail.\nI’m not really looking for contributions at the moment, but if you have ideas that you think might be useful, see the contributing guide. This project is in its very early stages. I’ve been researching various components of what I want but the big one only clicked into place last week. If you want to chat, the best place to reach me online is Mastodon. This blog does not have comments and never will.\nThere is a project board at https://github.com/orgs/AlgoCompSynth/projects/8 if you want to follow along. The first order of business is to get the hardware set up and playing a 440 Hz sine wave - this is the “Hello, world” of micro-controller audio projects and the worst case is that CLAMS becomes another guitar tuner. I’ll be posting pictures here, and maybe an MP3 of the audio.\nAt this point I believe my development host will be an Acer Chromebook Spin 714. Chromebooks have come a long way since Google gave me a developer preview of the original “Mario” Chromebook in late 2010. They run Android apps, Chrome web apps, and there’s an integrated virtual machine that runs Debian “bullseye” in an LXD container.\nI hope to have a minimum viable product to show by the middle of March. I at least need to have something that I can tweak by then because my other hobby, basketball analytics, will be kicking in with March Madness. ;-)"
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html",
    "href": "posts/proof-of-concept-plan/index.html",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "",
    "text": "\"In the beginning, there was a plan,\nAnd then came the assumptions,\nAnd the assumptions were without form,\nAnd the plan without substance,\n\n\"And the darkness was upon the face of the workers,\nAnd they spoke among themselves saying, ...\"\n\n- unknown NSFW cubicle worker"
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html#building-clams---preliminary-road-map",
    "href": "posts/proof-of-concept-plan/index.html#building-clams---preliminary-road-map",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "Building CLAMS - Preliminary Road Map",
    "text": "Building CLAMS - Preliminary Road Map\nI have a preliminary road map to share with you. The plan is very preliminary for two reasons:\n\nI have two other projects that compete with this one for attention. Normally my optimum active project count is two, since it’s rare that both will be blocked at the same time.\nThis project involves hardware, and component availability is … well … challenging.\n\nThis second reason is why I have inserted a proof-of-concept phase up front. I have a pretty good idea of what I would do if someone handed me working Raspberry Pi Pico audio hardware and well-documented sample code. That is not the starting point for CLAMS.\nI’m not a hardware hacker by any stretch of the imagination. I don’t even have a soldering station! CLAMS is open source. The code is licensed GPL-3. The documentation and any media I produce with CLAMS is licensed Creative Commons Attribution / Share-Alike. If someone wants to build CLAMS gizmos and sell them, that’s fine with me as long as they give me credit and give their users a copy of what I’m providing with CLAMS."
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html#hardware-for-the-proof-of-concept",
    "href": "posts/proof-of-concept-plan/index.html#hardware-for-the-proof-of-concept",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "Hardware for the proof of concept",
    "text": "Hardware for the proof of concept\n\nRaspberry Pi Pico H and Raspberry Pi Debug Probe\nFirst of all you will need a Raspberry Pi Pico H. This is the Raspberry Pi branded board with headers and a serial wire debug (SWD) connector pre-soldered onto the board. Here’s the link for the store locator:\nhttps://www.raspberrypi.com/products/raspberry-pi-pico/\nImportant! You need the one without wireless and with headers!\nYou will also need a Raspberry Pi Debug Probe. Here’s the store locator link:\nhttps://www.raspberrypi.com/products/debug-probe/\nThis is newly-announced and I don’t know about availablilty. I have four on order that I expect to be here next week. If you can’t get them, there is a workaround, which I’ll publish in a separate post.\nThe reason you need this is that zeptoforth communicates with a host computer via a serial connection, not USB. The debug probe connects a USB port on the host computer with a Raspberry Pi Pico serial port and translates the signals. The host computer sees a serial port over USB.\n\n\nPimoroni Pico Audio Pack and (Pico Omnibus or Pico Decker)\nI am testing two audio boards for CLAMS. The first one is the Pimoroni Pico Audio Pack:\nPimoroni Pico Audio Pack\nThe store is in the United Kingdom but I’ve had good luck with their shipping.\nBecause the debug probe needs to connect directly to the serial pins on the Pico, you will also need either a Pico Omnibus or a Pico Decker.\nThe Omnibus has two expansion slots. The audio pack will take up one, and you will need to leave the other one unused. That’s where you’ll connect the debug probe to the Pico serial port pins. I’ll post a picture as soon as the debug probes get here.\nThe Decker has four expansion slots. The audio pack takes up one and you need to reserve one for the debug probe connections. But you can put two other packs on the remaining slots, so feel free to explore the Pico universe!\n\n\nWaveshare Electronics Audio Expansion Module for Raspberry Pi Pico\nThe second audio board I’m testing is the Waveshare Electronics Audio Expansion Module. The store is in China, so availability may be a challenge. I have some on order, so I can’t give much more data.\nThe Waveshare Electonics add-on appears to be more convenient than the Pimoroni pack. The documentation is better, it comes with speakers, and the hardware interface with the Pico leaves a full set of open Pico male header pins. This last part means you can use an ordinary breadboard to connect the serial port pins to the debug probe; you don’t need an expander."
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html#software-for-the-proof-of-concept",
    "href": "posts/proof-of-concept-plan/index.html#software-for-the-proof-of-concept",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "Software for the proof of concept",
    "text": "Software for the proof of concept\nThe primary goal of the proof of concept is to make a sound - at least a 440 hz sine wave - with just a Raspberry Pi Pico running zeptoforth and the Pimoroni audio pack. A large part of this effor is finding out where the performance constraints are going to be for synthesizing audio in real time with a Raspberry Pi Pico.\nInitially, I want to know how much audio I can make in real time with 24-bit samples at 48 kHz using a single Pico. I can’t rule out dropping back to 16-bit / 44.1 kHz audio, multi-Pico configurations or both without this testing.\nThe planned audio software includes:\n\naudio hardware interface words, and\na direct sound synthesis (Cordesses 2004a), (Cordesses 2004b), (Bochkarev et al. 2019) signal generator.\n\nAt this early stage I probably won’t need a real-time operating system capability."
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html#target-date-for-proof-of-concept",
    "href": "posts/proof-of-concept-plan/index.html#target-date-for-proof-of-concept",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "Target date for proof of concept",
    "text": "Target date for proof of concept\nI’m calling the proof of concept release v0.2.5. I’ve set the due date to March 17, 2023. I expect to have Waveshare devices here but the software for them probably won’t be done by then.\nOnce I know what the audio constraints on a single Pico are, I’ll re-scope the project. I’d strongly prefer a one-to-one ratio of performers to Picos. There is no hardware “Pico cluster” available as far as I know. Interconnecting multiple Picos adds complexity to the breadboarding process and printed circuit board design is way above my pay grade."
  },
  {
    "objectID": "posts/proof-of-concept-plan/index.html#but-heres-what-i-plan-to-build-after-the-proof-of-concept",
    "href": "posts/proof-of-concept-plan/index.html#but-heres-what-i-plan-to-build-after-the-proof-of-concept",
    "title": "A Man, A Plan, A Clam … er …",
    "section": "But here’s what I plan to build after the proof of concept …",
    "text": "But here’s what I plan to build after the proof of concept …\nGiven that all of this could change after the proof of concept, here’s the rest of the plan.\n\nFirst release (v0.5.0) - Software (low-level infrastructure)\n\nall real-time synthesis / audio I/O words working\nstretch goal is all synthesis algorithms in Csound 7\n\nCsound 7 FLOSS Manual\n\ntarget date: 2023-05-12\n\n\n\nSecond release (v0.7.5) (mid-level user interface)\n\nsignal flow graph interpreter\ntarget date: 2023-06-16\n\n\n\nFull release (v0.9.0+) (high-level user interface)\n\nfull composition and live performance user interface\nstretch goal: port to Electro-Smith Daisy\ntarget date: 2023-07-14"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Command Line Algorithmic Music System (CLAMS)",
    "section": "",
    "text": "A Man, A Plan, A Clam … er …\n\n\n\n\n\n\n\nChucK\n\n\ndigital-audio\n\n\ndirect-digital-synthesis\n\n\nembedded-systems\n\n\nFORMULA\n\n\nforth\n\n\nHMSL\n\n\nlive-coding\n\n\nmicrocontrollers\n\n\nnews\n\n\nNUMULA\n\n\npimoroni\n\n\nproject-management\n\n\nraspberry-pi-debug-probe\n\n\nraspberry-pi-pico\n\n\nwaveshare-electronics\n\n\nzeptoforth\n\n\n\n\n\n\n\n\n\n\n\nFeb 26, 2023\n\n\nM. Edward (Ed) Borasky\n\n\n\n\n\n\n\n\nWelcome To the CLAMS Blog\n\n\n\n\n\n\n\nnews\n\n\nmicrocontrollers\n\n\nlive-coding\n\n\nembedded-systems\n\n\nforth\n\n\ndigital-signal-processing\n\n\nalgorithmic-composition\n\n\nalgorave\n\n\nraspberry-pi-pico\n\n\nzeptoforth\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nM. Edward (Ed) Borasky\n\n\n\n\n\n\nNo matching items"
  }
]